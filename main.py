import threading

from PIL import Image
import pytesseract
from dearpygui import core, simple
import pyperclip

control_window = simple.window("Control", x_pos=0, y_pos=0, height=800)
current_uid = 0


def _generate_text_window_unique_names(title):
    """
    Generates unique names for the text windows and widgets
    :param title: The original window title (will be modified to "title_#"
    :return: A array of unique IDs [window title, top copy button id, bottom copy button id]
    """
    global current_uid
    output_ids = [
        f"{title}_{str(current_uid)}",
        f"top_copy_btn_{str(current_uid)}",
        f"bottom_copy_btn_{str(current_uid)}"
    ]
    current_uid += 1
    return output_ids


def create_text_window(text, title):
    """
    Creates a text window. It's simply a window with some text. There are two copy to clipboardd buttons. One above
    and one bellow the text.
    Use this to create a window containing a lot of text.
    :param text: text the window will contain
    :param title: the title of the window. It doesn't need to be unique since a unique number will be attributed to it
    :return: None
    """
    unique_ids = _generate_text_window_unique_names(title)
    with simple.window(unique_ids[0]):
        core.add_button(unique_ids[1], label="Copy to clipboard", callback=lambda source, data: pyperclip.copy(data), callback_data=text)
        core.add_text(text)
        core.add_button(unique_ids[2], label="Copy to clipboard", callback=lambda source, data: pyperclip.copy(data), callback_data=text)


def convert_image(sender, data):
    """
    Callback function, will convert the currently selected image.
    It works asynchronously by calling _convert_image using run_async_function. And once completed, calls
    _convert_image_return_callback to create the text window containing the OCR text gathered from the image.
    :param sender: The sender object (see dearpygui documentation)
    :param data: The data object (see dearpygui documentation)
    :return: None
    """
    image_path = core.get_data("image path")
    core.run_async_function(_convert_image, image_path, return_handler=_convert_image_return_callback)


def _convert_image(sender, image_path):
    """
    The async part of the convert_image function. It does the CPU intensive OCR work and returns the text generated.
    :param sender: dearpygui sender object
    :param image_path: image path list ["path/to/directory", "file_name.png"]
    :return: object containing the image path and image text {"image path": image_path, "image text": image_text}
    """
    if image_path == "":
        return
    image_text = pytesseract.image_to_string(Image.open(image_path[1]))
    return {"image path": image_path, "image text": image_text}


def _convert_image_return_callback(sender, data):
    """
    The UI synchronous part of the conver_image function. It takes the text generated by the async OCR function and
    displays it in a text window.
    :param sender: dearpygui sender object
    :param data: The data object should contain the image name and image text
    {"image path": image_path, "image text": image_text}
    :return: None
    """
    image_text = data["image text"]
    image_path = data["image path"]
    create_text_window(image_text, image_path[1])


def set_image(sender, data):
    """
    Sets the select image path.
    This sets a global variable containing the path to the currently select image. This image will be converted to
    text by OCR once the user presses the convert image button.
    :param sender: dearpygui sender object
    :param data: data should be the image path object of format ["path/to/directory", "file_name.png"]
    :return: None
    """
    global control_window
    core.add_data("image path", data)
    core.set_value("image name", data[1])

"""
The main control window. This is where the user does most of the work. Selecting images and converting them.
It's also where all the app's settings are located.
"""
with control_window:
    # allow user to select image to convert
    core.add_text("Select an Image")
    core.add_button("Select Image", callback=lambda *_: core.open_file_dialog(callback=set_image))
    core.add_button("Convert Image", callback=convert_image)

    # display the selected image name
    core.add_text("Selected image:")
    core.add_text("...", source="image name")

    # allows user to either save converted text to a window for clipboard access or save it to a file
    core.add_checkbox("save to file")

core.start_dearpygui()
